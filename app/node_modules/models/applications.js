// Applications model - APIs for the applications collection in the wwmmorg DB
var collectionName = 'applications',
    model = function(){

  this.db = {};
  this.collection = {};

  this.setDB = function(db) {
    this.db = db;
    this.collection = db.collection(collectionName);
    return this;
  };

  this.insert = function(data, callback) {
    return this.collection.insertOne(data, {w:1,j:true}, callback || function(){});
  };

  this.update = function(appID, data, callback) {
    var appID = Number(appID);
    if(Object.keys(data).length === 0){data.appID = appID};
    return this.collection.updateOne({appID: appID}, {$set: data}, {w:1,j:true}, callback || function(){});
  };
  
  this.get = function(appID, filter, callback) { // By appID
    var appID = Number(appID);
    filter ? filter._id = 0 : filter = {_id: 0};
    return this.collection.find({appID: appID}, filter)
               .limit(1)
               .next(callback || function(){});
  };
  
  this.getBy = function(query, filter, callback) {
    var query = query || {};
    filter ? filter._id = 0 : filter = {_id: 0};
    return this.collection.find(query, filter)
               .toArray(callback || function(){});
  };
  
  this.getMany = function(appID, filter, callback) {
    var appID = appID || [];
    appID = appID.map(function(el){return Number(el)});
    filter ? filter._id = 0 : filter = {_id: 0};
    return this.collection.find({appID: {$in: appID}}, filter)
               .toArray(callback || function(){});
  };
  
  this.remove = function(appID, callback) { 
    var appID = Number(appID);
    return this.collection.deleteOne({appID: appID}, {w:1,j:true}, callback || function(){});
  };

  this.updateStatus = function(appID, Status, callback) {
    var appID = Number(appID);
    return this.collection.updateOne({appID: appID}, {$set: {status: Status}}, {w:1,j:true}, callback || function(){});
  };

  this.getActiveApps = function(type, callback) { // type: loan|collect
    return this.collection.find({type: type, status: 'active'},
                                {_id: 0, appID: 1, userID: 1,
                                 weight: 1, amount: 1, balance: 1})
               .sort({weight: -1})
               .toArray(callback);
  };

  this.getUserApps = function(userID, filter, callback) { // List of apps by userID
    var userID = Number(userID);
    filter ? filter._id = 0 : filter = {_id: 0};
    return this.collection.find({userID: userID}, filter).toArray(callback);
  };
};

module.exports = new model();
