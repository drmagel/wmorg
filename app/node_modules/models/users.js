// Users model - APIs for the users collection in the wwmmorg DB
var collectionName = 'users',
    model = function(){
  this.db = {};
  this.collection = {};

  this.setDB = function(db) {
    this.db = db;
    this.collection = db.collection(collectionName);
    return this;
  };

  this.insert = function(data, callback) {
    return this.collection.insertOne(data, {w:1,j:true}, callback || function(){});
  };

  this.update = function(userID, data, callback) {
    var userID = Number(userID);
    if(Object.keys(data).indexOf('userRole') > -1){delete data.userRole};
    if(Object.keys(data).length === 0){data.userID = userID};
    return this.collection.updateOne({userID: userID}, {$set: data}, {w:1,j:true}, callback || function(){});
  };

  this.updateUserRole = function(userID, userRole, callback) {
    var userID = Number(userID)
      , userRole = userRole || []
      ;
    return this.collection.updateOne({userID: userID},
                                     {$set: {userRole: userRole}},
                                     {w:1,j:true}, callback || function(){});
  };

  this.updateUserRating = function(userID, score, callback) {
    var userID = Number(userID)
      , score  = Number(score);
    return this.collection.findOneAndUpdate({userID: userID},
                                            {$inc: {"userRating.score": score,
                                                    "userRating.evaluations": 1}},
                                            {returnOriginal: false},
                                            callback || function(){});
  };

  this.get = function(userID, filter, callback) {
    var userID = Number(userID);
    filter ? filter._id = 0 : filter = {_id: 0};
    return this.collection.find({userID: userID}, filter)
             .limit(1)
             .next(callback || function(){});
  };

  this.getList = function(userID, filter, callback) {
    if(!!!Array.isArray(userID)){userID = [].concat(userID)};
    var userID = userID.map(function(el){return Number(el)});
    filter ? filter._id = 0 : filter = {_id: 0};
    return this.collection.find({userID: {$in: userID}}, filter).toArray(callback);
  };

/*
  this.getList = function(userID, filter, callback) {
    var userID = Number(userID);
    filter ? filter._id = 0 : filter = {_id: 0};
    return this.collection.find({userID: userID}, filter).toArray(callback);
  };
*/

  this.remove = function(userID, callback) { // For the test purpose only
    var userID = Number(userID);
    return this.collection.deleteOne({userID: userID}, {w:1,j:true}, callback || function(){});
  };

  this.verify = function(email, callback) {
    return this.collection.find(
             {email: email},
             {_id:0, userID:1, email:1, userStatus:1, groupAdminUserID:1}
           ).toArray(callback);
  };
};

module.exports = new model();
