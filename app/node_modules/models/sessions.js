// Sessions model - APIs for the sessions collection in the wwmmorg DB
var collectionName = 'sessions',
    session = require('../config').session,
    model = function(){

  this.db = {};
  this.collection = {};

  this.setDB = function(db) {
    this.db = db;
    this.collection = db.collection(collectionName);
    return this;
  };

  this.insert = function(data, callback) {
    var d = new Date();
    data.sessID = session.generate_sessID();
    data.validTill = new Date(d.setMinutes(d.getMinutes() + session.sessionActivePeriod)).getTime();
    return this.collection.insertOne(data, {w:1,j:true}, callback || function(){});
  };

  this.update = function(sessID, callback) {
    var d = new Date();
    var validTill = new Date(d.setMinutes(d.getMinutes() + session.sessionActivePeriod)).getTime();
    return this.collection.updateOne(
             {sessID: sessID},
              {$set: {validTill: validTill}},
              {w:1,j:true}, callback || function(){});
  };

  this.makeExpired = function(sessID, callback) {
    var d = new Date();
    var validTill = new Date(d.setMinutes(d.getMinutes() - (session.sessionActivePeriod + 10))).getTime();
    return this.collection.updateOne(
             {sessID: sessID},
              {$set: {validTill: validTill}},
              {w:1,j:true}, callback || function(){});
  };

  this.get = function(sessID, filter, callback) { // By sessID, only one
    filter ? filter._id = 0 : {};
    return this.collection.find({sessID: sessID}, filter)
             .limit(1)
             .next(callback || function(){});
  };

  this.remove = function(sessID, callback) { 
    return this.collection.deleteOne({sessID: sessID}, {w:1,j:true}, callback || function(){});
  };

  this.validate = function(sessID, callback) {
    var d = new Date()
      , now = d.getTime()
      , validTill = new Date(d.setMinutes(d.getMinutes() + session.sessionActivePeriod)).getTime();
    return this.collection.findOneAndUpdate(
                {sessID: sessID, validTill: {$gt: now}},
                {$set: {validTill: validTill}},
                { projection: {sessID:1,_id:0},
                  returnOriginal: false},
                callback || function(){});
  };

  this.getValidSess = function(callback) {
    var d = new Date();
    return this.collection.find({validTill: {$gt: d.getTime()}},
                                {_id: 0, sessID: 1, userID: 1})
               .toArray(callback);
  };

  this.getInvalidSess = function(callback) { 
    var d = new Date();
    return this.collection.find({validTill: {$lt: d.getTime()}},
                                {_id: 0, sessID: 1, userID: 1})
               .toArray(callback);
  };

  this.delInvalidSess = function(callback) { 
    var d = new Date();
    return this.collection.deleteMany({validTill: {$lt: d.getTime()}},
                                     {w:1,j:true},
                                     callback || function(){});
  };

  this.getUsersSess = function(userID, filter, callback) { // List of sessions by userID
    var userID = Number(userID);
    filter ? filter._id = 0 : {};
    return this.collection.find({userID: userID}, filter).toArray(callback);
  };
};

module.exports = new model();
