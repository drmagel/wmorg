exports.operatePlan = function(req, res){
  var api = 'operatePlan'
    , permissions = ['businessAdmin'] // Required permissions for the API execution
    , sessID = req.headers.auth
    , operand // valid values: 'create', 'update', 'delete', 'get'
    , body = {}
    , userID = Number(req.body.userID || 0)
    ;
  if ( sessID === undefined ||
       sessID !== req.body.sessID ||
       userID === 0 ) {return res.end()};
  res.set('Content-Type', 'application/json');
  res.set('Auth', sessID);
  body.sessID = sessID;
//------------------------------------------------------
  var planID = req.body.planID || []
    , plan = req.body.plan || []
    , filter = req.body.filter || {} // filter for 'get' API
    , d = new Date()
    ;
  req.query.operand ? operand = req.query.operand : operand = req.body.operand; 
  if(!!!Array.isArray(plan)){plan = [].concat(plan)};
  if(!!!Array.isArray(planID)){planID = [].concat(planID)};

  session.get(sessID,{userID:1, validTill:1}, function(e,r){ // session validation
    if(e){return res.status(500).json({error: "API:"+api+":session validation: "+e})};
    if(r === null || r.userID !== userID){ // no sessID or different userID
      body.plan = [];
      return errResponse(reason.invalidSessid, body, res);
//      body.result = false;
//      body.reason = 'invalid_sessid';
//      res.json(body);
    } else if(r.validTill < d.getTime()) { // sessID is expired
      body.plan = [];
      return errResponse(reason.expiredSessid, body, res);
//      body.result = false;
//      body.reason = 'sessid_expired';
//      res.json(body);
    } else { // user validation
      users.get(userID, {'userRole':1}, function(e,r){
        if(e){return res.status(500).json({error: "API:"+api+":user role: "+e})};
        if(!!!r){return res.end()};
        if(r.userRole.some(function(el){return permissions.indexOf(el) > -1;})){ // user has permission
          switch(operand){
            case 'create':
              var counter = plan.length;
              body.plan = [];
              plan.forEach(function(pln){
                count.get('planID', function(e,r){
                  if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                  pln.planID = r.value.seq;
                  plans.insert(pln, function(e,r){
                    if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                    delete pln._id;
                    body.plan.push(pln);
                    if(--counter === 0){
                      if(body.plan.length === 1){body.plan = body.plan.shift()}
                      body.result = true;
                      res.json(body);
                    }
                  });
                });
              })
            break;
            case 'update':
              var counter = plan.length;
              body.plan = [];
              plan.forEach(function(pln){
                plans.update(pln.planID, pln, function(e,r){
                  if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                  delete pln._id;
                  body.plan.push(pln);
                  if(--counter === 0){
                    if(body.plan.length === 1){body.plan = body.plan.shift()}
                      body.result = true;
                      res.json(body);
                  }
                });
              });
            break;
            case 'remove':
              var counter = planID.length;
              planID.forEach(function(pln){
                plans.remove(pln, function(e,r){
                  if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                  if(--counter === 0){
                    if(planID.length === 1){planID = planID.shift()}
                    body.result = true;
                    body.planID = planID;
                    res.json(body);
                  }
                });
              });
            break;
            case 'get':
              planID = planID.shift(); // Extract planID from the List
              plans.get(planID, filter, function(e,r){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                body.result = true;
                body.planID = planID;
                body.plan = r;
                res.json(body);
              })
            break;
            default:
              res.status(500).json({error: "API:"+api+": Operand "+operand+" is not supported"});
          } // switch()
        } else { // user doesn't have permission
          body.plan = [];
          return errResponse(reason.permissionDenied, body, res);
//          body.result = false;
//          body.reason = 'permission_denied';
//          res.json(body);
        }
      }); // users.get
    } // if-else
  }); // session.validate()
}

