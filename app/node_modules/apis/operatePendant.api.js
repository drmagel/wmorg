exports.operatePendant = function(req, res){
  var api = 'operatePendant'
    , sessID = req.headers.auth
    , operand // // valid values: 'create', 'update', 'remove', 'get', 'getby'
    , userID = Number(req.body.userID) || 0
    , body = {};
  if ( sessID === undefined ||
       sessID !== req.body.sessID ||
       userID === 0 ) {return res.end()};
  res.set('Content-Type', 'application/json');
  res.set('Auth', sessID);
  body.sessID = sessID;
  req.query.operand ? operand = req.query.operand : operand = req.body.operand;
//------------------------------------------------------

  var d = new Date()
    , pndID = req.body.pndID || []
    , pendant = req.body.pendant || [] // for 'create' and 'update' operands
    , filter = req.body.filter || {} // filter for 'get' and 'getby' operands
    , data = req.body.data || {} // select (find) data for getby operand
  ;

  if(!!!Array.isArray(pendant)){pendant = [].concat(pendant)};
  if(!!!Array.isArray(pndID)){pndID = [].concat(pndID)};

  session.get(sessID,{userID:1, validTill:1}, function(e,r){ // session validation
    if(e){return res.status(500).json({error: "API:"+api+":session validation: "+e})};
    if(r === null || r.userID !== userID){ // no sessID or different userID
      body.result = false;
      body.reason = 'invalid_sessid';
      res.json(body);
    } else if(r.validTill < d.getTime()) { // sessID is expired
      body.result = false;
      body.reason = 'sessid_expired';
      res.json(body);
    } else { // sessID is OK
      switch(operand){
        case 'create':
          if(pendant.length === 0){return res.end()};
          var pndCounter = pendant.length;
          body.pendant = [];
          pendant.forEach(function(pnd){
            if(!!!pnd.amount    ||
               !!!pnd.loanAppID ||
               !!!pnd.clctAppID){return res.end()}; 
            pnd.status = 'offered';
            count.get('pndID', function(e,r){
              if(e){return res.status(500).json({error: "API:"+api+": "+e})};
              pnd.pndID = r.value.seq;
              pendants.insert(pnd, function(e,r){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                delete pnd._id;
                body.pendant.push(pnd);
                applications.get(pnd.loanAppID, {pending:1, balance:1, pendants:1,}, function(e,a){
                  if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                  if(!!!a){return res.end()};
                  a.pending += Number(pnd.amount);
                  a.balance -= Number(pnd.amount);
                  a.pendants.push(pnd.pndID);
                  applications.update(pnd.loanAppID, a);
                });
                applications.get(pnd.clctAppID, {pendants:1}, function(e,a){
                  if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                  if(!!!a){return res.end()};
                  a.pendants.push(pnd.pndID);
                  applications.update(pnd.clctAppID, a);
                });
                if(--pndCounter === 0){
                  if(body.pendant.length === 1){body.pendant = body.pendant.shift()}
                  body.result = true;
                  res.json(body);
                }
              });
            });
          });
        break;
        case 'update':
          if(pendant.length === 0){return res.end()};
          var pndCounter = pendant.length;
          body.pendant = [];
          pendant.forEach(function(pnd){
            pendants.update(pnd.pndID, pnd, function(e,r){
              if(e){return res.status(500).json({error: "API:"+api+": "+e})};
              delete pnd._id;
              body.pendant.push(pnd);
              if(--pndCounter === 0){
                if(body.pendant.length === 1){body.pendant = body.pendant.shift()}
                  body.result = true;
                  res.json(body);
              }
            });
          });
        break;
/**** REMOVE must be done from transactions API
        case 'remove':
          var pndCounter = pndID.length;
          pndID.forEach(function(pnd){
            pendants.get(pnd, {loanAppID:1, clctAppID:1}, function(e,p){
              if(e){return res.status(500).json({error: "API:"+api+": "+e})};
              if(!!!p){return res.end()} // pndID is not correct.
              applications.get(p.loanAppID, {pendants:1}, function(e,a){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                if(!!!a){return res.end()};
                a.pendants.splice(a.pendants.indexOf(pnd),1);
                applications.update(r.loanAppID, a);
              });
              applications.get(r.clctAppID, {pendants:1}, function(e,a){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                if(!!!a){return res.end()};
                a.pendants.splice(a.pendants.indexOf(pnd),1);
                applications.update(r.clctAppID, a);
              });
              pendants.remove(pnd, function(e,r){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                if(--pndCounter === 0){
                  if(pndID.length === 1){pndID = pndID.shift()}
                  body.result = true;
                  body.pndID = pndID;
                  res.json(body);
                }
              });             
            }); // pendants.get
          }); // pndID.forEach
        break;
*/
        case 'cancel':
          if(pndID.length === 0){return res.end()};
          var pndCounter = pndID.length;
          pndID.forEach(function(pnd){
            pendants.get(pnd, {loanAppID:1, clctAppID:1, amount:1}, function(e,p){
              if(e){return res.status(500).json({error: "API:"+api+": "+e})};
              if(!!!p){return res.end()} // pndID is not correct.
              applications.get(p.loanAppID, {pending:1, balance:1, pendants:1}, function(e,a){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                if(!!!a){return res.end()};
                a.pendants.splice(a.pendants.indexOf(pnd),1);
                a.pending -= Number(p.amount);
                a.balance += Number(p.amount);
                applications.update(p.loanAppID, a);
              });
              applications.get(p.clctAppID, {pendants:1}, function(e,a){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                if(!!!a){return res.end()};
                a.pendants.splice(a.pendants.indexOf(pnd),1);
                applications.update(p.clctAppID, a);
              });
              pendants.remove(pnd, function(e,r){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                if(--pndCounter === 0){
                  if(pndID.length === 1){pndID = pndID.shift()}
                  body.result = true;
                  body.pndID = pndID;
                  res.json(body);
                }
              });             
            }); // pendants.get
          }); // pndID.forEach
        break;
        case 'get':
          if(pndID.length === 0){return res.end()};
          pndID = pndID.shift(); // Extract pndID from the List
          pendants.get(pndID, filter, function(e,r){
            if(e){return res.status(500).json({error: "API:"+api+": "+e})};
            body.result = true;
            body.pndID = pndID;
            body.pendant = r;
            res.json(body);
          });
        break;
        case 'getby':
          pendants.getBy(data, filter, function(e,r){
            if(e){return res.status(500).json({error: "API:"+api+": "+e})};
            body.result = true;
            body.pndID = r.map(function(el){return el.pndID});
            body.pendant = r;
            res.json(body);
          });
        break;
        case 'flipstatus':
          if(pndID.length === 0){return res.end()};
          var pndCounter = pndID.length;
          body.pendant = [];
          body.pndID = [];
          pndID.forEach(function(pnd){           
            pendants.get(pnd, {pndID:1, status:1}, function(e,p){
              if(e){return res.status(500).json({error: "API:"+api+": "+e})};
              if(!!!p){return res.end()};
              p.status = (p.status === 'approved' ? 'offered' : 'approved');
              pendants.updateStatus(pnd, p.status, function(e,r){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                if(r.result.nModified === 1){
                  body.pendant.push(p);
                  body.pndID.push(pnd);                
                }
                if(--pndCounter === 0){
                  body.result = true
                  res.json(body);}                
              });
            });
          })
        break;
        default:
          res.status(500).json({error: "API:"+api+": Operand "+operand+" is not supported"});
      } // switch
    } // if-else
  }); // session validation
}

