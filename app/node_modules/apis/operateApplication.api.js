const EventEmitter = require('events');
const emitter = new EventEmitter();

exports.operateApplication = function(req, res){
  var api = 'operateApplication'
    , sessID = req.headers.auth
    , operand // valid values: create, get, getby, cancel
    , userID = Number(req.body.userID) || 0
    , body = {};
  if ( sessID === undefined ||
       sessID !== req.body.sessID ||
       userID === 0 ) {return res.end()};
  res.set('Content-Type', 'application/json');
  res.set('Auth', sessID);
  body.sessID = sessID;
//------------------------------------------------------
  req.query.operand ? operand = req.query.operand : operand = req.body.operand;

/*  // Application descriptions
  applications = { // LOANs
    appID: ,
    userID: ,
    assetAppID: , //Optional, only if ASSET was created 
    amount: ,  // initial app amount
    balance: , // real app amout (goes from 'amount' to 0.00)
    asset: ,   // loaned money which can be collected
    pending: , // pending + balance + asset == amount. From pending to asset only after transaction is closed.
    pendants: [pndID, pndID], // only during the negotiation process. Otherwise pendants: [],
    plan: {
      planID: ,
      interest: , // procents
      duration: 
    },
    transactions: [{transID, amount, status},{}],
    type: 'loan',
    weight: ,
    status: active|freezed|completed|canceled,
    releaseDate: Date.now() + plan.duration
    creationDate: Date.now()
  }

  applications = { // ASSETs
    appID: ,
    userID: ,
    amount: , // investment * %plan.interest
    investment: , // loaned amount 
    applications: [{appID, amount},{}], // COLLECT applicaitons created from it.
    type: 'asset',
    status: active|completed,
    creationDate: Date.now()
  }

  applications = { // COLLECTs
    appID: ,
    userID: ,
    assetAppID: , //Optional, only if ASSET was created
    amount: ,
    pendants: [pndID, pndID], // only during the negotiation process. Otherwise pendants: [],
    transactions: [{transID, amount, status},{}], 
    type: 'collect',
    weight: ,
    status: active|completed|canceled,
    creationDate: Date.now()
  }
*/

  var d = new Date()
    , locale = "en-us"
    , appID = Number(req.body.appID) || 0
    , filter = req.body.filter || {} // filter for 'get' operands
    , planID = Number(req.body.planID) || 0  // for 'create' operand
    , appType = req.body.type || '' // for 'create' and 'getActiveApps' operands
    , amount = Number(req.body.amount) || 0
    ;
  
//Helpers
  function createApplication(Application, callback){
    count.get('appID', function(e,r){
    if(e){return res.status(500).json({error: "API:"+api+": "+e})};
      Application.appID = r.value.seq;
      applications.insert(Application, function(e,r){
        if(e){return res.status(500).json({error: "API:"+api+": "+e})};
        delete Application._id;
        callback(Application);
      });
    });
  };

  session.get(sessID,{userID:1, validTill:1}, function(e,r){ // session validation
    if(e){return res.status(500).json({error: "API:"+api+":session validation: "+e})};
    if(r === null || r.userID !== userID){ // no sessID or different userID   
      return errResponse(reason.invalidSessid, body, res);
//      body.result = false;
//      body.reason = 'invalid_sessid';
//      res.json(body);
    } else if(r.validTill < d.getTime()) { // sessID is expired
      return errResponse(reason.expiredSessid, body, res);
//      body.result = false;
//      body.reason = 'sessid_expired';
//      res.json(body);
    } else { // sessID is OK
     switch(operand){
        case 'create':
//console.log('operateApplication:create:amount: '+amount+'; appType: '+appType+'; planID: '+planID);
          // Test the parameters
          if(amount === 0){return res.end()};
          if(!!!(appType === 'loan' || appType === 'collect')){return res.end()};
          
          var Response =  function(application){
                body.application = application;
                body.result = true;
                res.json(body);
              };
              
          var Application = {
                userID: userID,
                amount: amount,
                pendants: [],
                transactions: [],
                type: appType,
                weight: 1, // from 1 till 9
                status: 'active',
                creationDate: d.getTime()
              };

          if (appType == 'loan') {
            if(planID === 0){return res.end()};
            Application.asset = 0;
            Application.balance = amount;
            Application.pending = 0;
            plans.get(planID,{planID:1, interest:1, duration:1}, function(e,r){
              if(e){return res.status(500).json({error: "API:"+api+": "+e})};
              if(!!!r){return res.end()}; // Wrong planID. Possible hack attack.
              var today = new Date(d.toLocaleString(locale, {month: "long", day: "numeric", year: "numeric"}));
              Application.plan = r;
              Application.releaseDate = new Date(today.setMonth(today.getMonth() + r.duration)).getTime();
              createApplication(Application, Response);
            });           
          } else {
            createApplication(Application, Response);
          };
          
        break;
        case 'get':
          if (appID === 0){return res.end()};
          applications.get(appID, filter, function(e,r){
            if(e){return res.status(500).json({error: "API:"+api+": "+e})};
            body.result = true;
            body.appID = appID;
            body.application = r;
            res.json(body);
          });
        break;
        case 'getUserApps':
          applications.getUserApps(userID, filter, function(e,r){
            if(e){return res.status(500).json({error: "API:"+api+": "+e})};
            if(!!!r){return res.end()};
            body.result = true;
            body.appID = r.map(function(el){return el.appID});
            body.application = r;
            res.json(body);
          });
        break;
        case 'getActiveApps':
          if(!!!(appType === 'loan' || appType === 'collect')){return res.end()};
          applications.getActiveApps(appType, function(e,r){
            if(e){return res.status(500).json({error: "API:"+api+": "+e})};
            if(!!!r){return res.end()};
            body.result = true;
            body.appID = r.map(function(el){return el.appID});
            var rCount = r.length;
            r.forEach(function(el){
              users.get(el.userID,{firstName:1, familyName:1}, function(e,u){
                if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                el.user = u;
                if(--rCount === 0){
                  body.application = r;
                  res.json(body);
                };
              });
            });
          });
        break;
        case 'cancel':
          if (appID === 0){return res.end()};
          if(!!!Array.isArray(appID)){appID = [].concat(appID)};
          var appCount = appID.length;
          body.appID = [];
          body.application = [];
          
          // Helpers
          var archiveAndCreateAssetApplication = function(app){
                var appid = Number(app.appID);
                  
                // Create an emitter for creating Archived application
                emitter.once('E'+appid, function(archivedApp){
                  applications.remove(appid, function(e,r){ // remove the Application, appid == app.appID
                    if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                  });                                  
                  apparchive.insert(archivedApp, function(e,r){
                    if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                    delete archivedApp._id
                    body.appID.push(archivedApp.appID);
                    body.application.push(archivedApp);
                    if(--appCount === 0){
                      body.result = true;
                      res.json(body);
                    }
                  });                                       
                });
                var archive = {
                      appID: app.appID,
                      userID: app.userID,
                      amount: app.amount,
                      transactions: app.transactions,
                      plan: app.plan,
                      type: app.type,
                      status: 'canceled',
                      releaseDate: new Date(d.toLocaleString(locale, {month: "long", day: "numeric", year: "numeric"})).getTime(),
                      creationDate: d.getTime()
                    };
                var asset = {
                      userID: app.userID,
                      amount: app.amount,
                      investment: app.amount,
                      applicaitons: [],
                      type: 'asset',
                      creationDate: d.getTime()
                    };
                if(app.type == 'loan'){
                  archive.asset = app.asset;
                  archive.releaseDate = app.releaseDate;
                  asset.amount  = app.asset;
                  asset.investment = app.asset;
                };
                if(asset.amount > 0){ // Create new ASSET and then archive the applications
                  createApplication(asset, function(a){
                    archive.assetAppID = a.appID;
                    emitter.emit('E'+appid, archive);
                  });
                } else { // Create just Archive application
                  emitter.emit('E'+appid, archive);                    
                }; 
              } //archiveAndCreateAssetApplication(app)

          // The main For loop.  
          appID.forEach(function(appid){
            applications.get(appid, filter, function(e,app){ // get the Applicaton
              if(e){return res.status(500).json({error: "API:"+api+": "+e})};
              if(!!!app){return res.end()};
              if(app.transactions.filter(function(tr){return tr.status === 'active';}).length > 0){ // MUST be checked in UI;
                body.appID = (appid);
                body.application = app;
                return errResponse(reason.activeTransactions, body, res);
//                body.result = false;
//                body.reason = 'active_transactions'
//                return res.json(body);
              }; // Just test on intruding
              
              var pndCounter = app.pendants.length;
              if(pndCounter > 0){ // There are some pendants
                app.pendants.forEach(function(pndid){ // Get pendants list
                  pendants.get(pndid,{loanAppID:1, clctAppID:1}, function(e,p){
                    if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                    if(!!!p){return res.end()};
                    // appid is a Number, p.loanAppID is a String. MUST use either == or toSting().
                    var otherAppID = (appid == p.loanAppID ? p.clctAppID : p.loanAppID); // figure out the other appID
                    applications.get(otherAppID, {pendants:1}, function(e,oa){ 
                      if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                      oa.pendants.splice(oa.pendants.indexOf(pndid),1);
                      applications.update(otherAppID, oa, function(e){ // remove pendant from otherAppID pendants
                        if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                      });
                      pendants.remove(pndid, function(e,r){ // remote the pendant itself
                        if(e){return res.status(500).json({error: "API:"+api+": "+e})};
                        if (--pndCounter === 0){ // all applicaiton pendants have been removed
                          archiveAndCreateAssetApplication(app);
                        };
                      }); // pendants.remove
                    }); // applications.get
                  }); // pendants.get              
                }); // a.pendants.forEach 
              } else { // No Pendants
                archiveAndCreateAssetApplication(app);
              }
              
            }); // applications.get
          }); // appID.forEach
        break;
//        case '':
//        break;
        default:
          res.status(500).json({error: "API:"+api+": Operand "+operand+" is not supported"});
     }
// 2
    } // if-else
  }); // session validation
}

