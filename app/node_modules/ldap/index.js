var base = require('config').ldap.base
  , manager = require('config').ldap.manager
  , login = require('config').login
  , lock  = require('models')('lockedusers')
  ;

function MODULE(){
  var self = this;
  self.ldapClient = undefined;

  self.init = function(ldapClient){
    return self.ldapClient = self.ldapClient || ldapClient;
  }

  self.setDB = function(db){
    lock.setDB(db);
  }

  self.confirm = function(email, passwd, fn){
    var b = {
              binddn: 'cn=' + email + ',' + base,
              password: passwd
            };
    self.ldapClient.bind(b, function(e){fn(e, e === undefined);});
  }

  self.authenticate = function(email, passwd, fn){
    var bind = {
              binddn: 'cn=' + email + ',' + base,
              password: passwd
            }
      , search = {
              base: base,
              filter: 'cn=' + email,
              attrs: 'sn',
            };
    self.ldapClient.bind(bind,function(e){
      if(e){return fn(e, null)};
      self.ldapClient.search(search, function(e,data){fn(e,data);});
    });
  }

  self.validate = function(email, passwd, fn){
    var res = {}
      , ee = new (require("events").EventEmitter)()
      ;
    self.authenticate(email, passwd, function(e, data){
      if(e){
        res.result = false;
        res.reason = 'invalid_credentials';
        lock.get(email, function(e,r){
          if(r === null){
            lock.insert(email,function(){ee.emit('done')})
          } else if(r.attempts < login.maxWrongPasswdNum){
            lock.update(email,function(){ee.emit('done')})
          } else { //r.attempts === login.maxWrongPasswdNum
            if(r.lockedTill === null){
              lock.lock(email,function(){ee.emit('done')})
            }else if(r.lockedTill > new Date().getTime()){
              res.reason = 'user_locked';
              ee.emit('done');
            } else {
              lock.renew(email,function(){ee.emit('done')});
            }
          }
        });
      } else { // LDAP authentication passed
        lock.get(email, function(e,r){
          if(r){
            if(r.lockedTill > new Date().getTime()){
              res.result = false;
              res.reason = 'user_locked';
              ee.emit('done');
            } else {
              res.result = true;
              res.userID = Number(data[0].sn[0]);
              lock.remove(email,function(){ee.emit('done')})
            }
          } else {
            res.result = true;
            res.userID = Number(data[0].sn[0]);
            ee.emit('done');
          };
        });
      };
    });
      ee.on('done', function(){fn(res)});
  }

  self.add = function(email, passwd, userID, fn){
    var dn = 'cn=' + email + ',' + base
      , attrs = [{attr: 'objectClass', vals: ['top','person']},
                 {attr: 'cn', vals: [email]},
                 {attr: 'sn', vals: [userID]}, 
                 {attr: 'userPassword', vals: [passwd]} 
                ];
    self.ldapClient.bind(manager,function(e){
      if(e){return fn(e, false)};
      self.ldapClient.add(dn, attrs, function(e){fn(e, e === undefined)});
    });
  }

  self.remove = function(email, fn){
    var dn = 'cn=' + email + ',' + base;
    self.ldapClient.bind(manager,function(e){
      if(e){return fn(e, false)};
      self.ldapClient.remove(dn, function(e){fn(e, e === undefined)});
    });
  }

  self.updateMail = function(email, newmail, fn){
    var dn = 'cn=' + email + ',' + base
      , newdn = 'cn=' + newmail;
    self.ldapClient.bind(manager,function(e){
      if(e){return fn(e, false)};
      self.ldapClient.rename(dn, newdn, function(e){fn(e, e === undefined)});
    });
  }

  self.updatePassword = function(email, passwd, newpasswd, fn){
    var dn = 'cn=' + email + ',' + base
      , user = {
              binddn: dn,
              password: passwd
            }
      , password = [{op: 'replace', attr: 'userPassword', vals: [newpasswd]}];
    self.ldapClient.bind(user,function(e){
      if(e){return fn(e, false)};
      self.ldapClient.modify(dn, password, function(e){fn(e, e === undefined)});
    });
  }

  self.close = function(){
    self.ldapClient.close() &&
    (self.ldapClient = undefined);
  }

} // End of module

module.exports = new MODULE();

