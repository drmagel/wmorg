exports.createAssetApplication = function(callback){
  var batch = 'createAssetApplication'
  , d = new Date()
  , locale = "en-us"
  , today = new Date(d.toLocaleString(locale, {month: "long", day: "numeric", year: "numeric"})).getTime()
  , archivedApplications = []
  , assetApplications = []
  , callback = callback || function(){};
  ;
/***
applications = { // LOANs
  appID: ,
  userID: ,
  assetAppID: , //Optional, only if ASSET was created 
  amount: ,  // initial app amount
  balance: , // real app amout (goes from 'amount' to 0.00)
  asset: ,   // loaned money which can be collected
  pending: , // pending + balance + asset == amount. From pending to asset only after transaction is closed.
  pendants: [pndID, pndID], // only during the negotiation process. Otherwise pendants: [],
  plan: {
    planID: ,
    interest: , // procents
    duration: 
  },
  transactions: [{transID, amount, status},{}],
  type: 'loan',
  weight: ,
  status: active|completed|canceled,
  releaseDate: Date.now() + plan.duration
  creationDate: Date.now(),
  completionDate: date
}

applications = { // ASSETs
  appID: ,
  userID: ,
  amount: , // investment * %plan.interest
  balance: ,
  investment: , // loaned amount 
  applications: [{appID, amount},{}], // COLLECT applicaitons created from it.
  type: 'asset',
  status: active|completed,
  creationDate: Date.now(),
  completionDate: date
}

***/
  applications.getBy({$and: [{type: 'loan'},{status: {$in: ['active','completed']}},{releaseDate: {$lte: today}}]}, {}, function(e,loanApps){
//  applications.getBy({$and: [{type: 'loan'},{status: {$in: ['active','completed']}}]}, {}, function(e,loanApps){
//    if(e){throw(new Error("BATCH:"+batch+": applications.getBy: " + e))};
    if(e){console.error("BATCH:"+batch+": applications.getBy: " + e);callback(e)};
    var count = loanApps.length;
    // No records in the data base
    if(!!!count){      
      callback(null, {archivedApplications: archivedApplications, assetApplications: assetApplications});
    }; 
    // Else
    loanApps.forEach(function(loan){      
      var amount = loan.asset * (1 + loan.plan.interest/100) // investment * %plan.interest 
        , asset = {
            userID: loan.userID,
            amount: amount,
            balance: amount,
            investment: loan.asset, // loaned amount 
            applications: [],
            type: 'asset',
            status: 'active',
            creationDate: d.getTime(),
            completionDate: 0
          }
        ;
      createApplication(asset, function(app){
        loan.assetAppID = app.appID;
        assetApplications.push(app);
        archivedApplications.push(loan);
        archiveApplication(loan, function(){
          if(--count === 0){
            callback(null, {archivedApplications: archivedApplications, assetApplications: assetApplications});
          };
        });
      }) // createApplication()
    }) // loanApps.forEach()
  }) // applications.getBy()
} // exports.batch
